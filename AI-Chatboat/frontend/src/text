import React, { useEffect, useState } from 'react';
import { FiCopy, FiCheck, FiEdit3 } from 'react-icons/fi';
import { PropsWithChildren } from 'react';

interface ChatBubbleProps {
  sender: 'user' | 'ai';
  message: React.ReactNode;
  timestamp?: Date;
  showHeader?: boolean;
  onEdit?: (text: string) => void;
}

const ChatBubble: React.FC<ChatBubbleProps> = ({
  sender,
  message,
  timestamp,
  showHeader = true,
  onEdit,
}) => {
  const isUser = sender === 'user';
  const [copied, setCopied] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editedMessage, setEditedMessage] = useState(
    typeof message === 'string' ? message : ''
  );
  const [messageLines, setMessageLines] = useState(1); // To track the number of lines in the message

  useEffect(() => {
    if (isEditing) {
      setEditedMessage(typeof message === 'string' ? message : '');
      // Calculate number of lines based on the message content
      setMessageLines(getLineCount(typeof message === 'string' ? message : ''));
    }
  }, [isEditing, message]);

  const getLineCount = (text: string) => {
    const lines = text.split('\n');
    return lines.length;
  };

  const copyMessage = async () => {
    try {
      let text = '';
      if (typeof message === 'string') text = message;
      else if (React.isValidElement(message)) {
        text = extractTextFromReactNode(message);
      }
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Copy failed:', err);
    }
  };

  const extractTextFromReactNode = (node: React.ReactNode): string => {
    if (typeof node === 'string') return node;
    if (Array.isArray(node)) return node.map(extractTextFromReactNode).join('');
    if (React.isValidElement(node)) {
      const element = node as React.ReactElement<PropsWithChildren<{}>>;
      return extractTextFromReactNode(element.props.children);
    }
    return '';
  };

  const formatTime = (date?: Date) => {
    if (!date) return '';
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  const handleEdit = () => setIsEditing(true);
  const handleCancelEdit = () => {
    setEditedMessage(typeof message === 'string' ? message : '');
    setIsEditing(false);
  };
  const handleSaveEdit = () => {
    if (editedMessage.trim()) {
      onEdit?.(editedMessage);
      setIsEditing(false);
    }
  };

  const autoResizeTextarea = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const textarea = e.target;
    textarea.style.height = 'auto';
    textarea.style.height = `${Math.min(textarea.scrollHeight, 180)}px`;
  };

  const defaultHeight = Math.min(messageLines, 7) * 20; // Approximate line height of 20px per line.

  return (
    <>
      <div className={`flex mb-6 ${isUser ? 'justify-end' : 'justify-start'}`}>
        <div className={`flex flex-col ${isUser ? 'items-end' : 'items-start'} max-w-full`}>
          {showHeader && (
            <div className="flex items-center space-x-2 text-xs mb-1 text-gray-400">
              {timestamp && <span>{formatTime(timestamp)}</span>}
              {isUser && !isEditing && (
                <button
                  onClick={handleEdit}
                  className="flex items-center gap-1 px-2 py-1 border border-gray-300 bg-white text-gray-600 rounded-md text-xs hover:bg-gray-100 transition-all duration-150 shadow-sm"
                >
                  <FiEdit3 className="w-3.5 h-3.5" />
                  <span>Edit</span>
                </button>
              )}
              <button
                onClick={copyMessage}
                className="flex items-center gap-1 px-2 py-1 border border-gray-300 bg-white text-gray-600 rounded-md text-xs hover:bg-gray-100 transition-all duration-150 shadow-sm"
              >
                {copied ? (
                  <>
                    <FiCheck className="w-3.5 h-3.5 text-green-500" />
                    <span className="text-green-500">Copied</span>
                  </>
                ) : (
                  <>
                    <FiCopy className="w-3.5 h-3.5" />
                    <span>Copy</span>
                  </>
                )}
              </button>
            </div>
          )}

          <div
            className={`relative p-4 text-sm whitespace-pre-wrap break-words overflow-wrap-anywhere rounded-2xl shadow-sm max-w-[85%] ${
              isUser
                ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-br-none self-end'
                : 'bg-white text-gray-800 border border-gray-100 rounded-bl-none self-start'
            }`}
          >
            <div>{message}</div>
          </div>
        </div>
      </div>

      {isEditing && (
        <div className="w-full px-4 py-3">
          <textarea
            value={editedMessage}
            onChange={(e) => {
              setEditedMessage(e.target.value);
              autoResizeTextarea(e);  // Auto resize as the user types
            }}
            className="w-full text-sm text-black p-4 border border-gray-300 rounded-xl resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white"
            rows={1}
            autoFocus
            placeholder="Edit your message..."
            style={{
              minHeight: `${defaultHeight}px`,
              maxHeight: '180px',
              overflowY: 'auto',
            }}
          />
          <div className="flex justify-end space-x-2 mt-2">
            <button
              onClick={handleCancelEdit}
              className="text-sm bg-gray-100 text-gray-700 px-4 py-1 rounded-md hover:bg-gray-200"
            >
              Cancel
            </button>
            <button
              onClick={handleSaveEdit}
              className="text-sm bg-blue-500 text-white px-4 py-1 rounded-md hover:bg-blue-600"
            >
              Send
            </button>
          </div>
        </div>
      )}

    </>
  );
};

export default ChatBubble;




















'use client';

import React, { useEffect, useRef, useState } from 'react';
import ChatBubble from '../../components/ChatBubble';
import axios from 'axios';
import { PaperAirplaneIcon, ArrowPathIcon, ChevronDownIcon } from '@heroicons/react/24/outline';
import Image from 'next/image';

const Chat = () => {
  const [messages, setMessages] = useState<{ sender: string; message: string }[]>([]);
  const [userInput, setUserInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showScrollButton, setShowScrollButton] = useState(false);
  const [scrollLockIndex, setScrollLockIndex] = useState<number | null>(null); // NEW
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const editMessageRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (editMessageRef.current) {
      editMessageRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });
      editMessageRef.current = null;
    } else if (scrollLockIndex === null) {
      scrollToBottom();
    }
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleScroll = () => {
    const container = chatContainerRef.current;
    if (container) {
      const atBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;
      setShowScrollButton(!atBottom);
    }
  };

  const sendMessage = async (messageToSend: string, insertAfterIndex?: number) => {
    const userMessage = { sender: 'user', message: messageToSend };
    const newMessages = [...messages];

    let editScrollIndex: number | null = null;

    if (insertAfterIndex !== undefined) {
      newMessages.splice(insertAfterIndex + 1, 0, userMessage);
      setScrollLockIndex(insertAfterIndex + 1); // LOCK SCROLL
      editScrollIndex = insertAfterIndex + 1;
    } else {
      newMessages.push(userMessage);
      setScrollLockIndex(null); // UNLOCK SCROLL FOR NEW MESSAGES
    }

    setMessages(newMessages);
    setIsLoading(true);

    try {
      const res = await axios.post('http://localhost:8000/api/v1/chatbot/chat', {
        message: messageToSend,
      });

      const aiMessage = { sender: 'ai', message: res.data.message };
      setMessages((prev) => {
        const updated = [...prev];
        if (insertAfterIndex !== undefined) {
          updated.splice(insertAfterIndex + 2, 0, aiMessage);
        } else {
          updated.push(aiMessage);
        }
        return updated;
      });

      setTimeout(() => {
        if (editScrollIndex !== null) {
          const bubble = document.getElementById(`msg-${editScrollIndex}`);
          if (bubble) bubble.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }, 100);
    } catch (err) {
      console.error(err);
    } finally {
      setIsLoading(false);
      setScrollLockIndex(null); // UNLOCK SCROLL AFTER AI RESPONSE
    }
  };

  const handleEditMessage = (text: string, index: number) => {
    sendMessage(text, index + 1);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage(userInput);
      setUserInput('');
    }
  };

  const autoResizeTextarea = () => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = 'auto';
      const newHeight = Math.min(textarea.scrollHeight, 180);
      textarea.style.height = `${newHeight}px`;
      textarea.style.overflowY = newHeight >= 180 ? 'auto' : 'hidden';
    }
  };

  useEffect(() => {
    autoResizeTextarea();
  }, [userInput]);

  const refreshChat = () => {
    setMessages([]);
  };

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Header */}
      <div className="p-4 shadow-sm bg-white border-b border-gray-100">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="flex aspect-square size-8 items-center justify-center rounded-lg text-sidebar-primary-foreground">
              <Image src="/1500px.png" alt="" width={150} height={50} className="w-full h-auto max-w-[150px]" />
            </div>
            <div>
              <h1 className="text-lg font-semibold text-gray-800">AI Assistant</h1>
              <p className="text-xs text-gray-500">{isLoading ? 'Typing...' : 'Online'}</p>
            </div>
          </div>
          <button
            onClick={refreshChat}
            className="text-blue-500 hover:bg-blue-100 p-2 rounded-full transition"
          >
            <ArrowPathIcon className="w-5 h-5" />
          </button>
        </div>
      </div>

      {/* Chat messages */}
      <div
        className="flex-1 overflow-y-auto px-4 py-6"
        ref={chatContainerRef}
        onScroll={handleScroll}
      >
        <div className="max-w-3xl mx-auto w-full">
          {messages.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-[calc(100vh-200px)] text-center text-gray-500">
              <div className="w-16 h-16 mb-4 rounded-full bg-white border border-gray-200 flex items-center justify-center">
                <PaperAirplaneIcon className="w-8 h-8 text-blue-500 transform rotate-45" />
              </div>
              <h3 className="text-lg font-medium mb-1">How can I help you today?</h3>
              <p className="text-sm max-w-md">Ask me anything or share your thoughts. I'm here to assist you.</p>
            </div>
          ) : (
            <>
              {messages.map((msg, i) => (
                <div key={i} id={`msg-${i}`}>
                  <ChatBubble
                    sender={msg.sender as 'user' | 'ai'}
                    message={msg.message}
                    onEdit={msg.sender === 'user' ? (text) => handleEditMessage(text, i) : undefined}
                  />
                </div>
              ))}
              {isLoading && (
                <ChatBubble
                  sender="ai"
                  message={
                    <div className="flex space-x-1 animate-pulse">
                      <div className="w-2 h-2 rounded-full bg-gray-400" />
                      <div className="w-2 h-2 rounded-full bg-gray-400" />
                      <div className="w-2 h-2 rounded-full bg-gray-400" />
                    </div>
                  }
                />
              )}
              <div ref={messagesEndRef} />
            </>
          )}
        </div>
        {showScrollButton && (
          <button
            className="fixed bottom-28 right-6 bg-white border border-gray-300 rounded-full shadow-md p-2 hover:bg-blue-50 transition"
            onClick={scrollToBottom}
          >
            <ChevronDownIcon className="w-5 h-5 text-blue-600" />
          </button>
        )}
      </div>

      {/* Input */}
      <div className="p-4">
        <div className="max-w-3xl mx-auto w-full">
          <div className="relative">
            <textarea
              ref={textareaRef}
              rows={1}
              className="w-full p-4 pr-12 border border-gray-200 rounded-xl resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              style={{ maxHeight: '180px', minHeight: '44px', overflowY: 'hidden' }}
              placeholder="Type your message..."
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              onKeyDown={handleKeyPress}
            />
            <button
              onClick={() => {
                sendMessage(userInput);
                setUserInput('');
              }}
              disabled={isLoading || !userInput.trim()}
              className={`absolute right-3 bottom-3 p-2 rounded-full ${
                isLoading || !userInput.trim()
                  ? 'text-gray-400'
                  : 'text-white bg-blue-500 hover:bg-blue-600'
              }`}
            >
              <PaperAirplaneIcon className="w-5 h-7" />
            </button>
          </div>
          <p className="text-xs text-gray-500 mt-2 text-center">
            AI Assistant may produce inaccurate information. Consider verifying important info.
          </p>
        </div>
      </div>
    </div>
  );
};

export default Chat;
